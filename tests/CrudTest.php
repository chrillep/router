<?php
use PHPUnit\Framework\TestCase;
use Maer\Router\Router;

/**
 * @coversDefaultClass \Maer\Router\Router
 */
class CrudTest extends TestCase
{
    protected $router;


    /**
     * Create a crud route to use for tests
     */
    public function setUp()
    {
        $this->router = new Router;

        $this->router->crud('/foo', CrudController::class, [
            'name' => 'bar',
        ]);
    }


    /**
     * Test creating and dispatching a crud route
     *
     * @covers Router::crud
     */
    public function testCreateAndDispatchCrudRoutes()
    {
        $r = $this->router;

        $response = $r->dispatch('GET', '/foo');
        $this->assertEquals('many', $response);

        $response = $r->dispatch('GET', '/foo/123');
        $this->assertEquals('one 123', $response);

        $response = $r->dispatch('POST', '/foo');
        $this->assertEquals('create', $response);

        $response = $r->dispatch('POST', '/foo/123');
        $this->assertEquals('update 123', $response);

        $response = $r->dispatch('DELETE', '/foo/123');
        $this->assertEquals('delete 123', $response);
    }

    /**
     * Test fetching routes using the autogenerated route names
     *
     * @covers Router::getRoute
     */
    public function testGetRouteFromCrudRoutes()
    {
        $r = $this->router;

        $this->assertEquals('/foo', $r->getRoute('bar.many'));
        $this->assertEquals('/foo', $r->getRoute('bar.create'));
        $this->assertEquals('/foo/123', $r->getRoute('bar.one', [123]));
        $this->assertEquals('/foo/123', $r->getRoute('bar.delete', [123]));
        $this->assertEquals('/foo/123', $r->getRoute('bar.update', [123]));
    }
}
